{"version":3,"file":"static/css/712.e8156977.chunk.css","mappings":"AAEA,4BAEE,6BAEA,QAAO,CADP,gBAFA,iBAGA,CAEA,gCCME,gKDLA,eCKA,yKDKF,gCCLE,4IDSF,8BAOE,mBAEA,iCCvBS,CDwBT,6BAJA,aADA,YAGA,uBAPA,kBAEA,QADA,MAEA,UAMA,CAEA,mCACE,UChCK,CDiCL,cAMJ,0BAKE,UC5CO,CDyCL,eACA,gBAGF,qBE9CJ,2BAKE,6BAEA,QAAO,CANP,aACA,sBACA,uBACA,iBAEA,iBACA,CAEA,mEAOE,qCAJA,WAGA,WAFA,UAFA,kBAGA,UDZS,CCiBX,kCAEE,SADA,MAEA,UCsCA,wBDzCF,kCAMI,SAIJ,iCAEE,WADA,SAEA,UC4BA,wBD/BF,iCAMI,SAIJ,4DAEE,mBAGF,+BAKE,UDhDO,CC6CL,eACA,gBAGF,iBAGF,6BACE,aDlDa","sources":["Shared/Components/MovieCard/MovieCard.module.scss","Assets/Styles/_variables.scss","Components/Home/Home.module.scss","../node_modules/Bootstrap/scss/mixins/_breakpoints.scss"],"sourcesContent":["@import '../../../Assets/Styles/variables';\r\n\r\n.movieCard {\r\n  position: relative;\r\n  background-color: transparent;\r\n  overflow: hidden;\r\n  border: 0;\r\n\r\n  & > div {\r\n    overflow: hidden;\r\n    @include prefix(border-radius, 8px !important);\r\n  }\r\n\r\n  &:hover {\r\n    img {\r\n      @include prefix(transform, scale(1.15));\r\n    }\r\n  }\r\n\r\n  img {\r\n    @include prefix(transition, 0.4s all ease);\r\n  }\r\n\r\n  p {\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    width: 35px;\r\n    height: 35px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background-color: $themeColor;\r\n    border-end-start-radius: 12px;\r\n\r\n    span {\r\n      color: $fontColor;\r\n      line-height: 0;\r\n    }\r\n  }\r\n}\r\n\r\n.title {\r\n  a {\r\n    font: {\r\n      size: 16px;\r\n      weight: 400;\r\n    }\r\n    color: $fontColor;\r\n    text-decoration: none;\r\n  }\r\n}","/******************** Variables ********************/\r\n$bgColor:#131722;\r\n$lightBgColor:rgba(30, 41, 82, 0.1);\r\n$bgTransparent:rgba(19, 91, 117, 0.6);\r\n$fontColor:#fff;\r\n$borderColor:#a8a8a83d;\r\n$borderHeight:1px;\r\n$secondFontColor:#949cb0;\r\n\r\n$themeColor: var(--bs-orange);\r\n\r\n/******************** Mixins ********************/\r\n@mixin prefix($property, $value) {\r\n  @each $prefix in ('', '-webkit-', '-moz-', '-ms-', '-o-') {\r\n    #{$prefix}#{$property}: #{$value};\r\n  }\r\n}","@import '../../Assets/Styles/variables';\r\n@import '../../Assets/Styles/utilities';\r\n\r\n.headerContent {\r\n  display: flex;\r\n  flex-flow: column wrap;\r\n  justify-content: center;\r\n  min-height: 250px;\r\n  background-color: transparent;\r\n  position: relative;\r\n  border: 0;\r\n\r\n  &::after,\r\n  &::before {\r\n    position: absolute;\r\n    content: '';\r\n    left: 24px;\r\n    right: 24px;\r\n    height: 1px;\r\n    background-color: $borderColor;\r\n  }\r\n\r\n  &::before {\r\n    top: 0;\r\n    bottom: 0;\r\n    width: 22%;\r\n\r\n    @include media-breakpoint-up(lg) {\r\n      top: 15%;\r\n    }\r\n  }\r\n\r\n  &::after {\r\n    top: 100%;\r\n    bottom: 18%;\r\n    width: 75%;\r\n\r\n    @include media-breakpoint-up(lg) {\r\n      top: 88%;\r\n    }\r\n  }\r\n\r\n  div,\r\n  p {\r\n    margin-bottom: 16px;\r\n  }\r\n\r\n  div {\r\n    font: {\r\n      size: 20px;\r\n      weight: 600;\r\n    }\r\n    color: $fontColor;\r\n    line-height: 28px;\r\n  }\r\n\r\n  p {\r\n    color: $secondFontColor;\r\n  }\r\n}","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl xxl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n"],"names":[],"sourceRoot":""}